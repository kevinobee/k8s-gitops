---
###
### Linkerd Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd
  annotations:
    linkerd.io/inject: disabled
  labels:
    linkerd.io/is-control-plane: "true"
    config.linkerd.io/admission-webhooks: disabled
    linkerd.io/control-plane-ns: linkerd
---
###
### Identity Controller Service RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-identity
subjects:
- kind: ServiceAccount
  name: linkerd-identity
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
---
###
### Destination Controller Service
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "nodes", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-destination
subjects:
- kind: ServiceAccount
  name: linkerd-destination
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-destination
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-sp-validator-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUo3SmJ5b3YyS2dPYTdpemU2NVhuZFF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3TXpNd01UVTBOekV4V2hjTk1qTXdNek13TVRVME56RXhXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU9qOVp0OVRsUEUyZlFNVGpBdDBpQ0ZuYUtrUzIrSmgwRnhRaUFoSEtHS3BFYjl0dTZOZAp0Znh4ZmU1Q20xQU1VU1V6RlZmSnhZUE4rTEJzNTJ4M0JrM0Z3YVlmTzE4Ym02cE1GTXlQS1VKaDBTb3JwNzV1CmRiazU2T3J1NlMxZzFhaDQ4UUxHZy9DR1NYTmhkUS9nVXpvN1UwblpQL1U3ZWJ0T3c4ZWtwVkM5THpuNVJIRGUKN1JpQ1grMzJjUHlrVUtjaWZUenVZVlRja2YvdGUycGxNbEVwWWpPVHVDRE9zNGNjZnB0RmFDMWJMSDZ3UnY5awpEaTVZSzhYeTdTY3R5R3pObWk4ZVlXdnJIUmJwMzRUOVNkWGZBWW9tL2J0bWtIdEs4bGtUd3BPbnNiL3Q2Ni9OCmZ0THp0d0ZEMWp1RUxYMHI2ZFpGSFpmdDNyVVRIV3N2SGNVQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBVzVPWlZsRW5tTEdtbWNUR1JGVUxxaGdGWXFHRktLRWE2RytHWk1GUmwKS2RGZ2xDZllJNjRZNHBocThqbk9LRTYwUm9HSUtyVFBwN3dJWkVaZkREWEN2Z3B6WkZaT1QrYkgxbnFNelhhVwpvaE5GVXRrUDk2ZDhYOEVhMGNJS0wyMkVtemlTU3J0ZGZ6eWVRZUpQM2RmNjUrN29Yc0x2MzFDQnBXYUpaWTltCllSZGhGZFozOUMzTjB2RnN5SVNVTnUvS3k3TU16ZzlrUUZKWjcxYUM1Zi9JdHY5WkpINGkzSkdyaDR0Qml0SGoKaEkva1g3YkFzMXZVSU1HWFZ4SVBHOG9TS1pxanU0dWlZRWZ4bnJoTjFDZFBac1BrVzJXMExDaS85SkVhU0JLYwpRbU9qaThWYWFQOTdIRllPdU9mYk9Sd1gyWmI4d3NPeFVCL3EwVFg5WFJBcAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNlAxbTMxT1U4VFo5QXhPTUMzU0lJV2RvcVJMYjRtSFFYRkNJQ0Vjb1lxa1J2MjI3Cm8xMjEvSEY5N2tLYlVBeFJKVE1WVjhuRmc4MzRzR3puYkhjR1RjWEJwaDg3WHh1YnFrd1V6SThwUW1IUktpdW4Kdm01MXVUbm82dTdwTFdEVnFIanhBc2FEOElaSmMyRjFEK0JUT2p0VFNkay85VHQ1dTA3RHg2U2xVTDB2T2ZsRQpjTjd0R0lKZjdmWncvS1JRcHlKOVBPNWhWTnlSLysxN2FtVXlVU2xpTTVPNElNNnpoeHgrbTBWb0xWc3NmckJHCi8yUU9MbGdyeGZMdEp5M0liTTJhTHg1aGErc2RGdW5maFAxSjFkOEJpaWI5dTJhUWUwcnlXUlBDazZleHYrM3IKcjgxKzB2TzNBVVBXTzRRdGZTdnAxa1VkbCszZXRSTWRheThkeFFJREFRQUJBb0lCQURIUGN2M054YXJvQmtQeApHdUNjRWpwcC9ETWhTQWNXK0UrMEc5RUJQWDRTUFN3YXpxRzNlQiszTjhBSFYyTCtyeDV2MUdGSFRzWEY5Q1ByCnRISTQ1QTBlZVM4RndGQ3QrMUttSDFBNFR3N1ZFTDJlUmFkdHdCZFFiUjVFNDI4REk4cDN5TGJhTC96dENLajEKTGV5dC9iMFdUOUVhOUJSK21hRFV6d0JRajlNNXBtc3BCUnYzR0hEUUo4T3pVTkdkaTNqZFY1MzRhR1JZZmJCdgpiSUIxb3ROWHVGb1dESk5ZcFUwLzJ3dDl1eklzY1JrVVBQQ0YvaUkrRFg5UkxjSzVjckxqSU1lR0JRazM5dTZrCnVHMWZNOVBDNWxsQmV5VHl2b2xnQWo1M2dqVkQrRmYzdlgrSzBSd0NoMnhIOXhsWHJFK3l3cm4xTHArMHdHZ3EKSmZmN1RRVUNnWUVBNm9oTTZyRGw5eFpPNlp0ZGx4aHdtbnlYajBZbDVRTFF4UkFlWHo3a2RPN1lDYVcrK3FoNgp2TlcycC9URFlWa0ZNeUZWTTk5YXAwRDZ3T0RGcXlNeG8rNUgvQ3k4OTdQVmpHNVJ6Wk4yL0cyY0ZONnM5aVkrClN5OWVQVXNkY1lHaDBBQmlkeVpSM0o0cWVFNDhydzN5MzhWQVBuenhTOUpaNy9zN2RDWXpZUThDZ1lFQS9sRDAKZG5SWDl2RXQ4N1FPRnNYWXZLVWc3YmlEanplemNJb3pMdlI4UFdUQmt2MUhhdGI0TmhpemdUQmVrVlA4ZFM0ZQpQNytIVmFOaGVvS3VpMm5UWHhXWHV2QnhGRjZFblpvVEc2NHU0M2g1SFlaTUxmSFU2R3ZNVmwwWmxocU5iUWdyCi8wUXNobVo5cGYya0hZWnM1U1VKSzNrTVZNdzR4aytzK2hUUXErc0NnWUVBbCtKUlBhUDJLY0F1dHFiQlEzcTIKWWJYU1NSejZxWWJiUU9PaFo3bEpKbGtQVzZBVlFDc2Y0VzdkN1lOYmpJMmtDbXJKek9BV3l6NFBwaDFxcGR3Uwo1OEVHcVU4bnlacVM3M0Q2VlJIcytxalpiY0tQYkpGendpa1k5TVRTZXBHakF4dGNxU0VOM3J3bmNPWHA4c3dyCnY3TDBXZ044R01oUEtsVWZPYWNMbXcwQ2dZQXVxTHV4WC9jam4yeEc0aW9UazRrSVUyT1BPZU1wUzVib2R2S2QKRXM0WWxYdk9kQm0rU0dLUnlrWmsxWE1FUnR4eXcxdFpadEoxcTl3ZWxndGdHTEpuSjVjRy9VWkI3blYyVk9aYwpsY0NVaTIzdE5NNlZQMkZJb3o2Q09lS1AzNTlDK2RUWXFMRmlsenRHVVJyakw5NmF6QWk2cVNMU0RBWCtuRytvCkVsbVdzUUtCZ0VWZVBRcCsxMTNsVFZmZllKRTdNc2xvbkFJa29FWmNIMjdoc2FjTEVhZE82WGtsS1pHWS9XUXcKMUkxc2h5SHNVZi81ZmtmUUtqNjdwR012QjdvTmE3dmhsanhHVmloaElpSFQ0Zng0M2t0QzRWUytrdVBKQWdOQQpSN2ZJZXRWVXVBOFlKOGFJZGFPVVJlVityNklaZmxHS0VmTHRUZmg0aVRCOHh0dDdUZnZVCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-sp-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-sp-validator.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-sp-validator
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUo3SmJ5b3YyS2dPYTdpemU2NVhuZFF3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3TXpNd01UVTBOekV4V2hjTk1qTXdNek13TVRVME56RXhXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU9qOVp0OVRsUEUyZlFNVGpBdDBpQ0ZuYUtrUzIrSmgwRnhRaUFoSEtHS3BFYjl0dTZOZAp0Znh4ZmU1Q20xQU1VU1V6RlZmSnhZUE4rTEJzNTJ4M0JrM0Z3YVlmTzE4Ym02cE1GTXlQS1VKaDBTb3JwNzV1CmRiazU2T3J1NlMxZzFhaDQ4UUxHZy9DR1NYTmhkUS9nVXpvN1UwblpQL1U3ZWJ0T3c4ZWtwVkM5THpuNVJIRGUKN1JpQ1grMzJjUHlrVUtjaWZUenVZVlRja2YvdGUycGxNbEVwWWpPVHVDRE9zNGNjZnB0RmFDMWJMSDZ3UnY5awpEaTVZSzhYeTdTY3R5R3pObWk4ZVlXdnJIUmJwMzRUOVNkWGZBWW9tL2J0bWtIdEs4bGtUd3BPbnNiL3Q2Ni9OCmZ0THp0d0ZEMWp1RUxYMHI2ZFpGSFpmdDNyVVRIV3N2SGNVQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBVzVPWlZsRW5tTEdtbWNUR1JGVUxxaGdGWXFHRktLRWE2RytHWk1GUmwKS2RGZ2xDZllJNjRZNHBocThqbk9LRTYwUm9HSUtyVFBwN3dJWkVaZkREWEN2Z3B6WkZaT1QrYkgxbnFNelhhVwpvaE5GVXRrUDk2ZDhYOEVhMGNJS0wyMkVtemlTU3J0ZGZ6eWVRZUpQM2RmNjUrN29Yc0x2MzFDQnBXYUpaWTltCllSZGhGZFozOUMzTjB2RnN5SVNVTnUvS3k3TU16ZzlrUUZKWjcxYUM1Zi9JdHY5WkpINGkzSkdyaDR0Qml0SGoKaEkva1g3YkFzMXZVSU1HWFZ4SVBHOG9TS1pxanU0dWlZRWZ4bnJoTjFDZFBac1BrVzJXMExDaS85SkVhU0JLYwpRbU9qaThWYWFQOTdIRllPdU9mYk9Sd1gyWmI4d3NPeFVCL3EwVFg5WFJBcAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["linkerd.io"]
    apiVersions: ["v1alpha1", "v1alpha2"]
    resources: ["serviceprofiles"]
  sideEffects: None
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-policy-validator-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpIRERHUnMvNmtDVC9RSkRIa0ZRVFl3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1ETXpNREUxTkRjeE1Wb1hEVEl6TURNek1ERTFORGN4TVZvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemdmM2szNmxYYStFWHVlbkwxWE9KNUFnM2lLa0FLQlA1TFR3MTZ2Ygp5UE1OVkxPd2NvOUx5V1FLbHQ1NEgvc3Fhcm5wencvMWJvRnE3UWxiUndkaS9oOTRMdXh4djJpOVNjWWRZeFBkCnhxd1M1V0dpV2lKSEozczFYdUxNZGgzRnA2YmpvQmFQYnU3Mm5hT084TngzdU1sSXNmQ1BPYkpQMnBHZWcyeVYKRFdLR2QrQWtCSjRIa3BMY1YrRHNoTGJVbTZWNm5NM1FJOTVlL0lNYndubTh1czhHS2lVekF1N0ZhdkxVcmFUegplU2FsSytmY0hWeEprNnk4aVdWYjc1NWZ0SERnZ3YrQ1JNdzJlb3hWenJqbWdwaGhmbTkxRFA1cHM4R2xJVVVWCnpQdGN5d0VNUDVCaGJwS3oyOU1rNXJUNFpVWTlqNTgzL2xnajdSS1ZZT0lHNlFJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQjBRS1J4TUJ6SDg1Q3VUbVR3VFhVRGJpNEoKTW5FeG1FSG1meldYN2JCYnAxclU1b3RTd0RONUpSU0liT3NFWm9ldWFFUDRES2JpdVZCeEl6TyswOUgyY0EyYgo3cG5SRjlrZGJMYzAxYkRlZjI5TUVJMU5kTHNnQU1CT3JneFd2Nmg1VVlTdjRwdEpWSG93WHE0MER6VTZVcithCnZtMmhRTkNKbFJheEZmVHZ3RUhKUkwyMmNoUTR2MnRyV2dEUS9XMUdXaU5aZXZmNE1FcXkwRFRCVWN6czF6bFMKSWUxSGF2ckM1NWpYcTJkV1BqMVFXTzlqM2JHNGRBajU5RERnOXgzMmhoQmpKVXZ0Q3dQWFZzYTFZUEVPclBmbQpORFVlcWVsY2hvTVUwbWx5RFQ4Zk13T1NUUUhaUk5BYmZCRDNIbGF2SDloNEd3ZVJBakNPUmpBOVl5NnUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBemdmM2szNmxYYStFWHVlbkwxWE9KNUFnM2lLa0FLQlA1TFR3MTZ2YnlQTU5WTE93CmNvOUx5V1FLbHQ1NEgvc3Fhcm5wencvMWJvRnE3UWxiUndkaS9oOTRMdXh4djJpOVNjWWRZeFBkeHF3UzVXR2kKV2lKSEozczFYdUxNZGgzRnA2YmpvQmFQYnU3Mm5hT084TngzdU1sSXNmQ1BPYkpQMnBHZWcyeVZEV0tHZCtBawpCSjRIa3BMY1YrRHNoTGJVbTZWNm5NM1FJOTVlL0lNYndubTh1czhHS2lVekF1N0ZhdkxVcmFUemVTYWxLK2ZjCkhWeEprNnk4aVdWYjc1NWZ0SERnZ3YrQ1JNdzJlb3hWenJqbWdwaGhmbTkxRFA1cHM4R2xJVVVWelB0Y3l3RU0KUDVCaGJwS3oyOU1rNXJUNFpVWTlqNTgzL2xnajdSS1ZZT0lHNlFJREFRQUJBb0lCQVFDcDkxYWRuZi9yM3F6VAo0a1ZBdm9lWWljVWptKzR4K2c2T3ZWcG1nWWVLS2tCWUhQaTJPVktyTEZXMENvbU0wSlk0ZjNETCtmMWVFWFBWCllqK2p4QXM5VzFhNVZ5T3JaVXVxdmI1bWl2QU5RczAvNENDZ1BPRDRTQ05LU00ybHIzL3NnN2dLekRHOXNYTlAKcnF0d05tQ3AxNXVaOTdzZ1BPSzFqQ1g1ZzYwZTRTckprVk9tYWJkWlhMb3Q2NVR4TzdoZUx0UHhIZkJ1NDB4UQpENzNldnlCN0dheVNZampFZCsyNmtodjBtc2JpaUZIbHJ6cTh3SUZzSFEzRm9uY3RIbFYxYUhpTFdhYW5JWGVICkhjWm1vMG5hRGZMR1RjalltQTd2SlczZUpzU0ZEZEd2czZWcGh3cEdCWjk2UHd3b1NaSlJ3VGlvRW5jNTNmalQKaUJDb1ZkZ0ZBb0dCQU9COXYrRm5Nem1jb1hYLzdTeXoydFJxT1g4TEptUjl4bnZsVStjYU9wUTBxTFBLTENwQQpKdmJaRGhKYmxucUZpeEJuanp6TXorLzJqNExtSjRJQUZQeDc0VVUzT2haSGxKYVhkTUZuNGlOaFZrejhCYS9SCk9lZGY1RXo3QWd5VUlUOHc3Sk5nRTRZb3FJYzV4QitOMTNLUXdDRHFJSnpNeUdHUVV2aHNMQW1qQW9HQkFPcnkKN0drVlovbGZCd0lJaS9CYkN5NitZMFk4Y0NHdHhscDdvT25OcWJ2SVlNTmhrSkxpSzZkZThNbk8yRmJUSHFGOQpjVzFkWWovK2hXdVd6bWRPbXJxenVYVzZvSVdLV3FXRHArcGVnYmYwSHJOZzJuQ21UblpHcElZV0NWNllnTU1MCjVqbDNHZ0krQU1OTER5emNCY05WQXVxSjgwTVQ0R3dQSGpWNFBRNERBb0dCQUpHQzhRMDV4NHBnYklnQUM4d2UKQ0lvSEVKMjRySG9Xek1FaU5QQm5uL0RROFVrWWt1Z1FEVEdVSC9ybVF2UEgvQXYyRkhKa2o2UUxQWnFyZEpCZgpYVHNMVVVsOE1ycWVTMElSaWl5VEdaRzFWaXN3Y0w4MTcwSjZkWkV3WW5PazBLZ1ZIa09vMHY3eSs4b3JOMlQ4Cm05bzIyVko4Y0FjeTllL0hqUUJablhIaEFvR0FjYUJBWTJYZDNnVnVMemFRN3hJbzYxZGFUYXFIRkZLbGZqY1MKRUdETmVLcWsyWGtDNFhhT1pDaVBUUnBER0dLTUNzL1BIblF1UXdMRjVjMk9Udm45N05Oa215SkI1Yk9PdVVOZAozd1FMdWpwTzZyT3BrUmR0Rk5oL1V2V3ZYRmRtMW0yWHp5emhvRG42Um5pemd4OTVqZ2s4R3MvU25Sc3N5elhZCmgwVjZTWjhDZ1lFQXdHNXhlVGNYTUFaU2JMN3JFL0p5YnJTdGhFVlBvOTArTnNuUmo1UTYrNmJBcFc5QS9yZHgKSGNJcjVrWGpJOEE3c1dFdzlqb0VrVlhId2VyMDdSb29OQVF6dlJkcGFhTFRoeDhGMk1LT2gvOWllSU9FZGJCVQpGeFRuMU1VWisySjRaVXl1TndMV01lYVZFUVJNWWVXYTlYMDZJWm82RU1zYStTRnZVOUtla2x3PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-policy-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-policy-validator.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-policy-validator
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUpIRERHUnMvNmtDVC9RSkRIa0ZRVFl3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa2JHbHVhMlZ5WkMxd2IyeHBZM2t0ZG1Gc2FXUmhkRzl5TG14cGJtdGxjbVF1YzNaagpNQjRYRFRJeU1ETXpNREUxTkRjeE1Wb1hEVEl6TURNek1ERTFORGN4TVZvd0x6RXRNQ3NHQTFVRUF4TWtiR2x1CmEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBemdmM2szNmxYYStFWHVlbkwxWE9KNUFnM2lLa0FLQlA1TFR3MTZ2Ygp5UE1OVkxPd2NvOUx5V1FLbHQ1NEgvc3Fhcm5wencvMWJvRnE3UWxiUndkaS9oOTRMdXh4djJpOVNjWWRZeFBkCnhxd1M1V0dpV2lKSEozczFYdUxNZGgzRnA2YmpvQmFQYnU3Mm5hT084TngzdU1sSXNmQ1BPYkpQMnBHZWcyeVYKRFdLR2QrQWtCSjRIa3BMY1YrRHNoTGJVbTZWNm5NM1FJOTVlL0lNYndubTh1czhHS2lVekF1N0ZhdkxVcmFUegplU2FsSytmY0hWeEprNnk4aVdWYjc1NWZ0SERnZ3YrQ1JNdzJlb3hWenJqbWdwaGhmbTkxRFA1cHM4R2xJVVVWCnpQdGN5d0VNUDVCaGJwS3oyOU1rNXJUNFpVWTlqNTgzL2xnajdSS1ZZT0lHNlFJREFRQUJvM0F3YmpBT0JnTlYKSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZApFd0VCL3dRQ01BQXdMd1lEVlIwUkJDZ3dKb0lrYkdsdWEyVnlaQzF3YjJ4cFkza3RkbUZzYVdSaGRHOXlMbXhwCmJtdGxjbVF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQjBRS1J4TUJ6SDg1Q3VUbVR3VFhVRGJpNEoKTW5FeG1FSG1meldYN2JCYnAxclU1b3RTd0RONUpSU0liT3NFWm9ldWFFUDRES2JpdVZCeEl6TyswOUgyY0EyYgo3cG5SRjlrZGJMYzAxYkRlZjI5TUVJMU5kTHNnQU1CT3JneFd2Nmg1VVlTdjRwdEpWSG93WHE0MER6VTZVcithCnZtMmhRTkNKbFJheEZmVHZ3RUhKUkwyMmNoUTR2MnRyV2dEUS9XMUdXaU5aZXZmNE1FcXkwRFRCVWN6czF6bFMKSWUxSGF2ckM1NWpYcTJkV1BqMVFXTzlqM2JHNGRBajU5RERnOXgzMmhoQmpKVXZ0Q3dQWFZzYTFZUEVPclBmbQpORFVlcWVsY2hvTVUwbWx5RFQ4Zk13T1NUUUhaUk5BYmZCRDNIbGF2SDloNEd3ZVJBakNPUmpBOVl5NnUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["policy.linkerd.io"]
    apiVersions: ["v1alpha1", "v1beta1"]
    resources: ["servers"]
  sideEffects: None
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-policy
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - policy.linkerd.io
    resources:
      - servers
      - serverauthorizations
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-destination-policy
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-policy
subjects:
  - kind: ServiceAccount
    name: linkerd-destination
    namespace: linkerd
---
###
### Heartbeat RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
roleRef:
  kind: Role
  name: linkerd-heartbeat
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-heartbeat
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-heartbeat
  labels:
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-heartbeat
  labels:
    linkerd.io/control-plane-ns: linkerd
roleRef:
  kind: ClusterRole
  name: linkerd-heartbeat
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-heartbeat
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: heartbeat
    linkerd.io/control-plane-ns: linkerd
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: servers.policy.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
  labels:
    linkerd.io/control-plane-ns: linkerd
spec:
  group: policy.linkerd.io
  names:
    kind: Server
    plural: servers
    singular: server
    shortNames: [srv]
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: false
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              type: object
              required:
                - podSelector
                - port
              properties:
                podSelector:
                  type: object
                  description: >-
                    Selects pods in the same namespace.
                  oneOf:
                    - required: [matchExpressions]
                    - required: [matchLabels]
                  properties:
                    matchLabels:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    matchExpressions:
                      type: array
                      items:
                        type: object
                        required: [key, operator]
                        properties:
                          key:
                            type: string
                          operator:
                            type: string
                            enum: [In, NotIn, Exists, DoesNotExist]
                          values:
                            type: array
                            items:
                              type: string
                port:
                  description: >-
                    A port name or number. Must exist in a pod spec.
                  x-kubernetes-int-or-string: true
                proxyProtocol:
                  description: >-
                    Configures protocol discovery for inbound connections.

                    Supersedes the `config.linkerd.io/opaque-ports` annotation.
                  type: string
                  default: unknown
                  enum:
                    - unknown
                    - HTTP/1
                    - HTTP/2
                    - gRPC
                    - opaque
                    - TLS
    - name: v1beta1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              type: object
              required:
                - podSelector
                - port
              properties:
                podSelector:
                  type: object
                  description: >-
                    Selects pods in the same namespace.
                  oneOf:
                    - required: [matchExpressions]
                    - required: [matchLabels]
                  properties:
                    matchLabels:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    matchExpressions:
                      type: array
                      items:
                        type: object
                        required: [key, operator]
                        properties:
                          key:
                            type: string
                          operator:
                            type: string
                            enum: [In, NotIn, Exists, DoesNotExist]
                          values:
                            type: array
                            items:
                              type: string
                port:
                  description: >-
                    A port name or number. Must exist in a pod spec.
                  x-kubernetes-int-or-string: true
                proxyProtocol:
                  description: >-
                    Configures protocol discovery for inbound connections.

                    Supersedes the `config.linkerd.io/opaque-ports` annotation.
                  type: string
                  default: unknown
                  enum:
                    - unknown
                    - HTTP/1
                    - HTTP/2
                    - gRPC
                    - opaque
                    - TLS
      additionalPrinterColumns:
      - name: Port
        type: string
        description: The port the server is listening on
        jsonPath: .spec.port
      - name: Protocol
        type: string
        description: The protocol of the server
        jsonPath: .spec.proxyProtocol
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: serverauthorizations.policy.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
  labels:
    linkerd.io/control-plane-ns: linkerd
spec:
  group: policy.linkerd.io
  scope: Namespaced
  names:
    kind: ServerAuthorization
    plural: serverauthorizations
    singular: serverauthorization
    shortNames: [saz]
  versions:
    - name: v1alpha1
      served: true
      storage: false
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              description: >-
                Authorizes clients to communicate with Linkerd-proxied servers.
              type: object
              required: [server, client]
              properties:
                server:
                  description: >-
                    Identifies servers in the same namespace for which this
                    authorization applies.

                    Only one of `name` or `selector` may be specified.
                  type: object
                  oneOf:
                    - required: [name]
                    - required: [selector]
                  properties:
                    name:
                      description: References a `Server` instance by name
                      type: string
                      pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                    selector:
                      description: >-
                        A label query over servers on which this authorization applies.
                      type: object
                      oneOf:
                        - required: [matchLabels]
                        - required: [matchExpressions]
                      properties:
                        matchLabels:
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        matchExpressions:
                          type: array
                          items:
                            type: object
                            required: [key, operator]
                            properties:
                              key:
                                type: string
                              operator:
                                type: string
                                enum: [In, NotIn, Exists, DoesNotExist]
                              values:
                                type: array
                                items:
                                  type: string
                client:
                  description:  Describes clients authorized to access a server.
                  type: object
                  oneOf:
                    - required: [meshTLS]
                    - required: [unauthenticated]
                  properties:
                    networks:
                      description: >-
                        Limits the client IP addresses to which this
                        authorization applies. If unset, the server chooses a
                        default (typically, all IPs or the cluster's pod
                        network).
                      type: array
                      items:
                        type: object
                        required: [cidr]
                        properties:
                          cidr:
                            type: string
                          except:
                            type: array
                            items:
                              type: string
                    unauthenticated:
                      description: >-
                        Authorizes unauthenticated clients to access a server.
                      type: boolean
                    meshTLS:
                      type: object
                      oneOf:
                        - required: [unauthenticatedTLS]
                        - required: [identities]
                        - required: [serviceAccounts]
                      properties:
                        unauthenticatedTLS:
                          type: boolean
                          description: >-
                            Indicates that no client identity is required for
                            communication.

                            This is mostly important for the identity
                            controller, which must terminate TLS connections
                            from clients that do not yet have a certificate.
                        identities:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            strings (as provided via MTLS)

                            The `*` prefix can be used to match all identities in
                            a domain. An identity string of `*` indicates that
                            all authentication clients are authorized.
                          type: array
                          items:
                            type: string
                            pattern: '^(\*|[a-z0-9]([-a-z0-9]*[a-z0-9])?)(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
                        serviceAccounts:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            service accounts (as provided via MTLS)
                          type: array
                          items:
                            type: object
                            required: [name]
                            properties:
                              name:
                                description: The ServiceAccount's name.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                              namespace:
                                description: >-
                                  The ServiceAccount's namespace. If unset, the
                                  authorization's namespace is used.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
    - name: v1beta1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              description: >-
                Authorizes clients to communicate with Linkerd-proxied servers.
              type: object
              required: [server, client]
              properties:
                server:
                  description: >-
                    Identifies servers in the same namespace for which this
                    authorization applies.

                    Only one of `name` or `selector` may be specified.
                  type: object
                  oneOf:
                    - required: [name]
                    - required: [selector]
                  properties:
                    name:
                      description: References a `Server` instance by name
                      type: string
                      pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                    selector:
                      description: >-
                        A label query over servers on which this authorization applies.
                      type: object
                      oneOf:
                        - required: [matchLabels]
                        - required: [matchExpressions]
                      properties:
                        matchLabels:
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        matchExpressions:
                          type: array
                          items:
                            type: object
                            required: [key, operator]
                            properties:
                              key:
                                type: string
                              operator:
                                type: string
                                enum: [In, NotIn, Exists, DoesNotExist]
                              values:
                                type: array
                                items:
                                  type: string
                client:
                  description:  Describes clients authorized to access a server.
                  type: object
                  oneOf:
                    - required: [meshTLS]
                    - required: [unauthenticated]
                  properties:
                    networks:
                      description: >-
                        Limits the client IP addresses to which this
                        authorization applies. If unset, the server chooses a
                        default (typically, all IPs or the cluster's pod
                        network).
                      type: array
                      items:
                        type: object
                        required: [cidr]
                        properties:
                          cidr:
                            type: string
                          except:
                            type: array
                            items:
                              type: string
                    unauthenticated:
                      description: >-
                        Authorizes unauthenticated clients to access a server.
                      type: boolean
                    meshTLS:
                      type: object
                      oneOf:
                        - required: [unauthenticatedTLS]
                        - required: [identities]
                        - required: [serviceAccounts]
                      properties:
                        unauthenticatedTLS:
                          type: boolean
                          description: >-
                            Indicates that no client identity is required for
                            communication.

                            This is mostly important for the identity
                            controller, which must terminate TLS connections
                            from clients that do not yet have a certificate.
                        identities:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            strings (as provided via MTLS)

                            The `*` prefix can be used to match all identities in
                            a domain. An identity string of `*` indicates that
                            all authentication clients are authorized.
                          type: array
                          items:
                            type: string
                            pattern: '^(\*|[a-z0-9]([-a-z0-9]*[a-z0-9])?)(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
                        serviceAccounts:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            service accounts (as provided via MTLS)
                          type: array
                          items:
                            type: object
                            required: [name]
                            properties:
                              name:
                                description: The ServiceAccount's name.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                              namespace:
                                description: >-
                                  The ServiceAccount's namespace. If unset, the
                                  authorization's namespace is used.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
      additionalPrinterColumns:
      - name: Server
        type: string
        description: The server that this grants access to
        jsonPath: .spec.server.name
---
###
### Service Profile CRD
###
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: serviceprofiles.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
  labels:
    linkerd.io/control-plane-ns: linkerd
spec:
  group: linkerd.io
  versions:
  - name: v1alpha1
    served: true
    storage: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            description: Spec is the custom resource spec
            required:
            - routes
            properties:
              dstOverrides:
                type: array
                required:
                - authority
                - weight
                items:
                  type: object
                  description: WeightedDst is a weighted alternate destination.
                  properties:
                    authority:
                      type: string
                    weight:
                      x-kubernetes-int-or-string: true
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
              opaquePorts:
                type: array
                items:
                  type: string
              retryBudget:
                type: object
                required:
                - minRetriesPerSecond
                - retryRatio
                - ttl
                description: RetryBudget describes the maximum number of retries that should be issued to this service.
                properties:
                  minRetriesPerSecond:
                    format: int32
                    type: integer
                  retryRatio:
                    type: number
                    format: float
                  ttl:
                    type: string
              routes:
                type: array
                items:
                  type: object
                  description: RouteSpec specifies a Route resource.
                  required:
                  - condition
                  - name
                  properties:
                    condition:
                      type: object
                      description: RequestMatch describes the conditions under which to match a Route.
                      properties:
                        pathRegex:
                          type: string
                        method:
                          type: string
                        all:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        any:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        not:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                    isRetryable:
                      type: boolean
                    name:
                      type: string
                    timeout:
                      type: string
                    responseClasses:
                      type: array
                      items:
                        type: object
                        required:
                        - condition
                        description: ResponseClass describes how to classify a response (e.g. success or failures).
                        properties:
                          condition:
                            type: object
                            description: ResponseMatch describes the conditions under
                              which to classify a response.
                            properties:
                              all:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              any:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              not:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              status:
                                type: object
                                description: Range describes a range of integers (e.g. status codes).
                                properties:
                                  max:
                                    format: int32
                                    type: integer
                                  min:
                                    format: int32
                                    type: integer
                          isFailure:
                            type: boolean
  - name: v1alpha2
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            description: Spec is the custom resource spec
            properties:
              dstOverrides:
                type: array
                required:
                - authority
                - weight
                items:
                  type: object
                  description: WeightedDst is a weighted alternate destination.
                  properties:
                    authority:
                      type: string
                    weight:
                      x-kubernetes-int-or-string: true
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
              opaquePorts:
                type: array
                items:
                  type: string
              retryBudget:
                type: object
                required:
                - minRetriesPerSecond
                - retryRatio
                - ttl
                description: RetryBudget describes the maximum number of retries that should be issued to this service.
                properties:
                  minRetriesPerSecond:
                    format: int32
                    type: integer
                  retryRatio:
                    type: number
                    format: float
                  ttl:
                    type: string
              routes:
                type: array
                items:
                  type: object
                  description: RouteSpec specifies a Route resource.
                  required:
                  - condition
                  - name
                  properties:
                    condition:
                      type: object
                      description: RequestMatch describes the conditions under which to match a Route.
                      properties:
                        pathRegex:
                          type: string
                        method:
                          type: string
                        all:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        any:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        not:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                    isRetryable:
                      type: boolean
                    name:
                      type: string
                    timeout:
                      type: string
                    responseClasses:
                      type: array
                      items:
                        type: object
                        required:
                        - condition
                        description: ResponseClass describes how to classify a response (e.g. success or failures).
                        properties:
                          condition:
                            type: object
                            description: ResponseMatch describes the conditions under
                              which to classify a response.
                            properties:
                              all:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              any:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              not:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              status:
                                type: object
                                description: Range describes a range of integers (e.g. status codes).
                                properties:
                                  max:
                                    format: int32
                                    type: integer
                                  min:
                                    format: int32
                                    type: integer
                          isFailure:
                            type: boolean
  scope: Namespaced
  preserveUnknownFields: false
  names:
    plural: serviceprofiles
    singular: serviceprofile
    kind: ServiceProfile
    shortNames:
    - sp
---
###
### TrafficSplit CRD
### Copied from github.com/servicemeshinterface/smi-sdk-go/blob/d4e76b1cd7a33ead5f38d1262dd838a31c80f4e5/crds/split.yaml
###
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: trafficsplits.split.smi-spec.io
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
  labels:
    linkerd.io/control-plane-ns: linkerd
spec:
  group: split.smi-spec.io
  scope: Namespaced
  conversion:
    strategy: None
  names:
    kind: TrafficSplit
    listKind: TrafficSplitList
    shortNames:
      - ts
    plural: trafficsplits
    singular: trafficsplit
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              required:
                - service
                - backends
              properties:
                service:
                  description: The apex service of this split.
                  type: string
                backends:
                  description: The backend services of this split.
                  type: array
                  items:
                    type: object
                    required: ['service', 'weight']
                    properties:
                      service:
                        description: Name of the Kubernetes service.
                        type: string
                      weight:
                        description: Traffic weight value of this backend.
                        x-kubernetes-int-or-string: true
      additionalPrinterColumns:
      - name: Service
        type: string
        description: The apex service of this split.
        jsonPath: .spec.service
    - name: v1alpha2
      served: true
      storage: false
      additionalPrinterColumns:
      - name: Service
        type: string
        description: The apex service of this split.
        jsonPath: .spec.service
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              required:
                - service
                - backends
              properties:
                service:
                  description: The apex service of this split.
                  type: string
                backends:
                  description: The backend services of this split.
                  type: array
                  items:
                    type: object
                    required: ['service', 'weight']
                    properties:
                      service:
                        description: Name of the Kubernetes service.
                        type: string
                      weight:
                        description: Traffic weight value of this backend.
                        type: number
  preserveUnknownFields: false
---
###
### Proxy Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: [""]
  resources: ["namespaces", "replicationcontrollers"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
subjects:
- kind: ServiceAccount
  name: linkerd-proxy-injector
  namespace: linkerd
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-proxy-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-proxy-injector-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUthTnJLK01UVnM1UlMvYlRFUXJvaDB3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBek16QXhOVFEzTVRGYUZ3MHlNekF6TXpBeE5UUTNNVEZhTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRQ3dLcnEzMWpGb0VnQ3gyeGZyUTNnR1JhM0lib1R5Nm45TXpnQ3dBczFmbkc2eApkSDFlYW41Umo2b1ppR05Bd0VoV2doOVQzWkowbE53cDJGcWdkcGdXZytsM2Rsc0dQY09BS1NMbGhVeHBNNitjCktpVUluMy9JeWdCTmZuMWFaMHh3SXB5b2NPVy9pL0FzSzZTTjRXbTd5OU5WZTlzeGlCd3RUQy8yRzBobktZZ0MKYjBGM2V4ZThZVlF5SmVmaDViVFcxdmdGTlE3VHFCZDJscFRCenpRbXA1T0t1ekRSZXZVMW1vU3FhOGM4U3FFdwp4RjAvTlArTHR2dEFsbnhva2dFU0s2N0w2ajV1NklqSnVXb3NMckJWT29HYWdXeDQyUFZKZUNNYm1RREpBN0Z1CnBsUUpQRzYrSGxCUDVna0FmUDUvR3BTTkt5SDFtOWR1Rmk5MlRucnhBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUN0dlB5d3VTeHZWbDNkR1ErNUtsMGlPK0Q5RXZkS1duenQKU0NNNTFMVWJNc1B5Q082M0NlSU8rZEl6RDBjTm13cFoxYVR2THlQM0xTeG90ajJ3UDJTeFR6T1Q0UEs0M3YyeApoWEU0MXdRM3VHNERVc0F5blNPRzZuOVNyWTVKaDM5N3Jka3Y4L1grRE5CeUhIVW01bzA2V3dtVUxOcjJEQno0CnlFcUo3ZHVIdXM4WDVXQ2xQS09DaXg4b3c2Z3lpbGFlSzhxdHBqSnFYc29OUmtoUklKSWt4SUhqT2hlL244SE8KWlpNaGlNdVYrZWIxdG94NnNQa3VCbjRXdTJkaDdvWUdXNHVicGRJVzZFY2NrTjFCQW1FcGpjdFRQNGN6SjRRMAoxU0RlaS9xYW5mTS9yRzZCYW1VQk5tU2tzZlZRbE4ySTc3QlVOenF2amVaMTJKcTR0L1BsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc0NxNnQ5WXhhQklBc2RzWDYwTjRCa1d0eUc2RTh1cC9UTTRBc0FMTlg1eHVzWFI5ClhtcCtVWStxR1loalFNQklWb0lmVTkyU2RKVGNLZGhhb0hhWUZvUHBkM1piQmozRGdDa2k1WVZNYVRPdm5Db2wKQ0o5L3lNb0FUWDU5V21kTWNDS2NxSERsdjR2d0xDdWtqZUZwdTh2VFZYdmJNWWdjTFV3djlodElaeW1JQW05QgpkM3NYdkdGVU1pWG40ZVcwMXRiNEJUVU8wNmdYZHBhVXdjODBKcWVUaXJzdzBYcjFOWnFFcW12SFBFcWhNTVJkClB6VC9pN2I3UUpaOGFKSUJFaXV1eStvK2J1aUl5YmxxTEM2d1ZUcUJtb0ZzZU5qMVNYZ2pHNWtBeVFPeGJxWlUKQ1R4dXZoNVFUK1lKQUh6K2Z4cVVqU3NoOVp2WGJoWXZkazU2OFFJREFRQUJBb0lCQUh2cFFqWm1tWS9iQWRRWQpDRVg1eWVXWGd6bjB5dHpXSmo1T3M5c1p6WDBQMmloRmlKMHRpTFl6dC9DSHAxQjNMeXB5RWpqNkk3YU9zaUZZCnhiNFNUTDJoZ1VqKzNkMlErZjhlY0NaQzBWRTZBcTUwVW1JelZqMVVJRXhoeVNnYWVvQnhTQUdPajN0Z29jbGYKMVRuYXNIVmdVOERRQW9oZmRYcERHWVVoQVpkVlMwNit4V1FJalVZWDFMcHJkKzh6cVVyb01jcGtRWXJwRmNvSgpqR0FVOW9oUnJYRWQwL2JvM3ZJcVhQN3BxRkNISVBBL2hHQ3VkeHUwSllLNmZuN1VDSlR3L2h6VXhHSnZxeDJ4CmJadDQxR3JWT21QZlQ4b29rc0NNYXkzTkdKWnUreGFyeXlxd0pxcnlNdFhUOWUyMWdzUTNGYTFoZXBDaEMwR0kKdWpxbGtqVUNnWUVBMU9WTGtsSnJtRDlza0prem5zVDlrYU11ZWtKN2x3eUlUTk5RMnpIVWx5VmJVeU82WnA5SQp3Zmh3QmYzejNFQ3ZWK1ByYlBFT3RlbUhSY2NKdS9EYmJDMDhDSHp1N0dwdit4bFJKU09BQ3JmQjBNZWkwKzNNCmlSMXdvRjl1WTJoeEVDTGE4Rm9mQ2xYNXE3bUNqRnM0WThvMnh0ckE1VHFOZG5OMXptUmE4TnNDZ1lFQTA5VzUKOWhlRzV2bGdWTGI1SUNRVzk2MEJVTkx2VmxiWWI2dXdpZWpxbnhCWXdQdmRBNEVSWXFIaDl4SjdrNDc2UDZzVwpnRnRJMDNoNzBZbVE2OWdpeEdlWWlYc3pESEtURHFyU3NKbXYrWTdwZ04vSjQ0Tk1vMlBMOU5ZT0xidHVOK2RQClc3ZTNKbklmbjY3OTVlQVE2a28xTTZ4amVTNFZJMWs1bWd3SnR5TUNnWUVBeCtZRTczODBSK0JGc0FBcDJBcGYKalVBTGhBQ295MHVaTDRtN2doVm42QVBMbkdVUHdRd081UkxCSE44MityaEI2K1MyU2JTT2U0Q3E0M25nU2ZmKwpEN1RwaVk3RlNIY29iajEzVThmaGtpNjRiYkVGMHJpV05LalA5OFdqZ1BPd05kYUVmT29oK3pKL0hCOHoxVlpSCnZHRkN6YlRaS21Pd01HaDVWVElsc2NFQ2dZQllaenRDSGpOb05PNGtyRzl2SUdDTllCL0tjUno4dFNXQ0JPNloKdnlBYTNhR01lQStXSk1qeWxvaE1xZVAwZ3BpZzlXOWdoYmZ3dUxsRGl0dDE4UzhoTS9LT2ZXR2ljalk0eXNVKwplZ1RjYXUyN29La0tUNE11TkxtckphR3BLQzBwRzFrYzk2QnhaUE1abXRmT2xTRzZCTm9MQkloR3pCcDZOQVE3CjY0WXFiUUtCZ1FESmM5ZVhHUnlqRGowZkpEMlRjb1N2WHAxTnN5Q2p0d0I1TmRtamg2c25ZQTZZVUxka21acWsKcVpBWGJyRFREL1FINUJ5SDczd1hmRmxicG9FMWo4NEtzWkRvSEVmaTVhd0VSdHB3M1hMWmpwTkJkMTRmampHRQppU0VuUVBNWFRxcDNHenV5SENOVHFTUnZHS0x6SEtpMEs3Yk85bjk3cVEvTGhaUUJnSVNvVXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-proxy-injector-webhook-config
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-proxy-injector.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-proxy-injector
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUthTnJLK01UVnM1UlMvYlRFUXJvaDB3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBek16QXhOVFEzTVRGYUZ3MHlNekF6TXpBeE5UUTNNVEZhTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRQ3dLcnEzMWpGb0VnQ3gyeGZyUTNnR1JhM0lib1R5Nm45TXpnQ3dBczFmbkc2eApkSDFlYW41Umo2b1ppR05Bd0VoV2doOVQzWkowbE53cDJGcWdkcGdXZytsM2Rsc0dQY09BS1NMbGhVeHBNNitjCktpVUluMy9JeWdCTmZuMWFaMHh3SXB5b2NPVy9pL0FzSzZTTjRXbTd5OU5WZTlzeGlCd3RUQy8yRzBobktZZ0MKYjBGM2V4ZThZVlF5SmVmaDViVFcxdmdGTlE3VHFCZDJscFRCenpRbXA1T0t1ekRSZXZVMW1vU3FhOGM4U3FFdwp4RjAvTlArTHR2dEFsbnhva2dFU0s2N0w2ajV1NklqSnVXb3NMckJWT29HYWdXeDQyUFZKZUNNYm1RREpBN0Z1CnBsUUpQRzYrSGxCUDVna0FmUDUvR3BTTkt5SDFtOWR1Rmk5MlRucnhBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUN0dlB5d3VTeHZWbDNkR1ErNUtsMGlPK0Q5RXZkS1duenQKU0NNNTFMVWJNc1B5Q082M0NlSU8rZEl6RDBjTm13cFoxYVR2THlQM0xTeG90ajJ3UDJTeFR6T1Q0UEs0M3YyeApoWEU0MXdRM3VHNERVc0F5blNPRzZuOVNyWTVKaDM5N3Jka3Y4L1grRE5CeUhIVW01bzA2V3dtVUxOcjJEQno0CnlFcUo3ZHVIdXM4WDVXQ2xQS09DaXg4b3c2Z3lpbGFlSzhxdHBqSnFYc29OUmtoUklKSWt4SUhqT2hlL244SE8KWlpNaGlNdVYrZWIxdG94NnNQa3VCbjRXdTJkaDdvWUdXNHVicGRJVzZFY2NrTjFCQW1FcGpjdFRQNGN6SjRRMAoxU0RlaS9xYW5mTS9yRzZCYW1VQk5tU2tzZlZRbE4ySTc3QlVOenF2amVaMTJKcTR0L1BsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods", "services"]
  sideEffects: None
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-config
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
data:
  values: |
    cliVersion: linkerd/cli stable-2.11.1
    clusterDomain: cluster.local
    clusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
    cniEnabled: false
    controlPlaneTracing: false
    controlPlaneTracingNamespace: linkerd-jaeger
    controllerImage: cr.l5d.io/linkerd/controller
    controllerImageVersion: stable-2.11.1
    controllerLogFormat: plain
    controllerLogLevel: info
    controllerReplicas: 1
    controllerUID: 2103
    debugContainer:
      image:
        name: cr.l5d.io/linkerd/debug
        pullPolicy: ""
        version: stable-2.11.1
    destinationProxyResources: null
    destinationResources:
      cpu:
        limit: 512m
        request: 100m
      memory:
        limit: 512Mi
        request: 128Mi
    disableHeartBeat: false
    enableEndpointSlices: false
    enableH2Upgrade: true
    enablePodAntiAffinity: false
    grafanaUrl: ""
    heartbeatResources: null
    heartbeatSchedule: ""
    highAvailability: false
    identity:
      issuer:
        clockSkewAllowance: 20s
        externalCA: false
        issuanceLifetime: 24h0m0s
        scheme: linkerd.io/tls
        tls:
          crtPEM: |
            -----BEGIN CERTIFICATE-----
            MIIBiDCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
            eS5saW5rZXJkLjAeFw0yMjAyMjAxMDQ0MzJaFw0yMzAyMjAxMDQ0NTJaMBwxGjAY
            BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
            QgAEI3cSatq5qSvZ2mBYKBg3pCne8DpuAkVpTjis7no2WHkl7ZrHEJ9b8Y1LRdBk
            UE63LdM+iLBoAk/nOnBYHsZhiKNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
            MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
            BBQfvp1+lSp3o2cUS38CIXIUDuko+DAKBggqhkjOPQQDAgNIADBFAiEAuaVoNP+W
            sRXmmDmiNt57jMbEBntYW1rqVGQ3GB6mn7MCIFGD8PxQ70phkGW2vxePKQ5uiPFB
            OO9bE2TZFhcJGJ88
            -----END CERTIFICATE-----
    identityProxyResources: null
    identityResources:
      cpu:
        limit: 512m
        request: 100m
      memory:
        limit: 512Mi
        request: 128Mi
    identityTrustAnchorsPEM: |
      -----BEGIN CERTIFICATE-----
      MIIBiDCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
      eS5saW5rZXJkLjAeFw0yMjAyMjAxMDQ0MzJaFw0yMzAyMjAxMDQ0NTJaMBwxGjAY
      BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
      QgAEI3cSatq5qSvZ2mBYKBg3pCne8DpuAkVpTjis7no2WHkl7ZrHEJ9b8Y1LRdBk
      UE63LdM+iLBoAk/nOnBYHsZhiKNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
      MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
      BBQfvp1+lSp3o2cUS38CIXIUDuko+DAKBggqhkjOPQQDAgNIADBFAiEAuaVoNP+W
      sRXmmDmiNt57jMbEBntYW1rqVGQ3GB6mn7MCIFGD8PxQ70phkGW2vxePKQ5uiPFB
      OO9bE2TZFhcJGJ88
      -----END CERTIFICATE-----
    identityTrustDomain: cluster.local
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    installNamespace: true
    linkerdVersion: stable-2.11.1
    namespace: linkerd
    nodeSelector:
      beta.kubernetes.io/os: linux
    podAnnotations: {}
    podLabels: {}
    policyController:
      defaultAllowPolicy: all-unauthenticated
      image:
        name: cr.l5d.io/linkerd/policy-controller
        pullPolicy: ""
        version: ""
      logLevel: linkerd=info,warn
      resources:
        cpu:
          limit: ""
          request: ""
        memory:
          limit: ""
          request: ""
    policyValidator:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      keyPEM: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    profileValidator:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    prometheusUrl: ""
    proxy:
      await: true
      capabilities: null
      cores: 1
      defaultInboundPolicy: ""
      disableIdentity: false
      enableExternalProfiles: false
      image:
        name: cr.l5d.io/linkerd/proxy
        pullPolicy: ""
        version: stable-2.11.1
      inboundConnectTimeout: 100ms
      isGateway: false
      isIngress: false
      logFormat: plain
      logLevel: warn,linkerd=info
      opaquePorts: 25,587,3306,4444,5432,6379,9300,11211
      outboundConnectTimeout: 1000ms
      podInboundPorts: ""
      ports:
        admin: 4191
        control: 4190
        inbound: 4143
        outbound: 4140
      requireIdentityOnInboundPorts: ""
      resources:
        cpu:
          limit: 50m
          request: 20m
        memory:
          limit: 64Mi
          request: 32Mi
      saMountPath: null
      uid: 2102
      waitBeforeExitSeconds: 0
    proxyContainerName: linkerd-proxy
    proxyInit:
      capabilities: null
      closeWaitTimeoutSecs: 0
      ignoreInboundPorts: 4567,4568
      ignoreOutboundPorts: 4567,4568
      image:
        name: cr.l5d.io/linkerd/proxy-init
        pullPolicy: ""
        version: v1.4.0
      resources:
        cpu:
          limit: 100m
          request: 10m
        memory:
          limit: 50Mi
          request: 10Mi
      saMountPath: null
      xtMountPath:
        mountPath: /run
        name: linkerd-proxy-init-xtables-lock
        readOnly: false
    proxyInjector:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    proxyInjectorProxyResources: null
    proxyInjectorResources: null
    publicAPIResources:
      cpu:
        limit: 510m
        request: 100m
      memory:
        limit: 510Mi
        request: 128Mi
    tolerations: null
    webhookFailurePolicy: Ignore
---
###
### Identity Controller Service
###
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-identity-issuer
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
data:
  crt.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJpRENDQVM2Z0F3SUJBZ0lCQVRBS0JnZ3Foa2pPUFFRREFqQWNNUm93R0FZRFZRUURFeEZwWkdWdWRHbDAKZVM1c2FXNXJaWEprTGpBZUZ3MHlNakF5TWpBeE1EUTBNekphRncweU16QXlNakF4TURRME5USmFNQnd4R2pBWQpCZ05WQkFNVEVXbGtaVzUwYVhSNUxteHBibXRsY21RdU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEClFnQUVJM2NTYXRxNXFTdloybUJZS0JnM3BDbmU4RHB1QWtWcFRqaXM3bm8yV0hrbDdackhFSjliOFkxTFJkQmsKVUU2M0xkTStpTEJvQWsvbk9uQllIc1poaUtOaE1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01CMEdBMVVkSlFRVwpNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXCkJCUWZ2cDErbFNwM28yY1VTMzhDSVhJVUR1a28rREFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBdWFWb05QK1cKc1JYbW1EbWlOdDU3ak1iRUJudFlXMXJxVkdRM0dCNm1uN01DSUZHRDhQeFE3MHBoa0dXMnZ4ZVBLUTV1aVBGQgpPTzliRTJUWkZoY0pHSjg4Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  key.pem: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUdMeDZ5RVltN05iVUVjOGdDOStRUC82SXlFVXBYTUZUb1RxcnVPQ241aVNvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFSTNjU2F0cTVxU3ZaMm1CWUtCZzNwQ25lOERwdUFrVnBUamlzN25vMldIa2w3WnJIRUo5Ygo4WTFMUmRCa1VFNjNMZE0raUxCb0FrL25PbkJZSHNaaGlBPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQ==
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-identity-trust-roots
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
data:
  ca-bundle.crt: |
    -----BEGIN CERTIFICATE-----
    MIIBiDCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
    eS5saW5rZXJkLjAeFw0yMjAyMjAxMDQ0MzJaFw0yMzAyMjAxMDQ0NTJaMBwxGjAY
    BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
    QgAEI3cSatq5qSvZ2mBYKBg3pCne8DpuAkVpTjis7no2WHkl7ZrHEJ9b8Y1LRdBk
    UE63LdM+iLBoAk/nOnBYHsZhiKNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
    MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
    BBQfvp1+lSp3o2cUS38CIXIUDuko+DAKBggqhkjOPQQDAgNIADBFAiEAuaVoNP+W
    sRXmmDmiNt57jMbEBntYW1rqVGQ3GB6mn7MCIFGD8PxQ70phkGW2vxePKQ5uiPFB
    OO9bE2TZFhcJGJ88
    -----END CERTIFICATE-----
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: identity
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity-headless
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: identity
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
  labels:
    app.kubernetes.io/name: identity
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.1
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-identity
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: identity
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-identity
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli stable-2.11.1
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.11.1
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: identity
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-identity
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - identity
        - -log-level=info
        - -log-format=plain
        - -controller-namespace=linkerd
        - -identity-trust-domain=cluster.local
        - -identity-issuance-lifetime=24h0m0s
        - -identity-clock-skew-allowance=20s
        - -identity-scheme=linkerd.io/tls
        env:
        - name: LINKERD_DISABLED
          value: "linkerd-await cannot block the identity controller"
        image: cr.l5d.io/linkerd/controller:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9990
          initialDelaySeconds: 10
        name: identity
        ports:
        - containerPort: 8080
          name: grpc
        - containerPort: 9990
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9990
        resources:
          limits:
            cpu: "512m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/issuer
          name: identity-issuer
        - mountPath: /var/run/linkerd/identity/trust-roots/
          name: trust-roots
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_CORES
          value: "1"
        - name: LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS
          value: "8080"
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst-headless.linkerd.svc.cluster.local.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: linkerd-policy.linkerd.svc.cluster.local.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8080,9990"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: localhost.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
          limits:
            cpu: "50m"
            memory: "64Mi"
          requests:
            cpu: "20m"
            memory: "32Mi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "443"
        image: cr.l5d.io/linkerd/proxy-init:v1.4.0
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-identity
      volumes:
      - name: identity-issuer
        secret:
          secretName: linkerd-identity-issuer
      - configMap:
          name: linkerd-identity-trust-roots
        name: trust-roots
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Destination Controller Service
###
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8086
    targetPort: 8086
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst-headless
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8086
    targetPort: 8086
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-sp-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: sp-validator
    port: 443
    targetPort: sp-validator
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-policy
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8090
    targetPort: 8090
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-policy-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: policy-https
    port: 443
    targetPort: policy-https
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
  labels:
    app.kubernetes.io/name: destination
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.1
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-destination
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: destination
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-destination
  template:
    metadata:
      annotations:
        checksum/config: 04e61956d5ce3d52e02d9c00ee602370bb72e9534a516ec007e9f573d3bda746
        linkerd.io/created-by: linkerd/cli stable-2.11.1
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.11.1
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: destination
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-destination
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_CORES
          value: "1"
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: localhost.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: localhost.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8086,8090,8443,9443,9990,9996,9997"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
          limits:
            cpu: "50m"
            memory: "64Mi"
          requests:
            cpu: "20m"
            memory: "32Mi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        lifecycle:
          postStart:
            exec:
              command:
              - /usr/lib/linkerd/linkerd-await
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      - args:
        - destination
        - -addr=:8086
        - -controller-namespace=linkerd
        - -enable-h2-upgrade=true
        - -log-level=info
        - -log-format=plain
        - -enable-endpoint-slices=false
        - -cluster-domain=cluster.local
        - -identity-trust-domain=cluster.local
        - -default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211
        image: cr.l5d.io/linkerd/controller:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9996
          initialDelaySeconds: 10
        name: destination
        ports:
        - containerPort: 8086
          name: grpc
        - containerPort: 9996
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9996
        resources:
          limits:
            cpu: "512m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        securityContext:
          runAsUser: 2103
      - args:
        - sp-validator
        - -log-level=info
        - -log-format=plain
        image: cr.l5d.io/linkerd/controller:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9997
          initialDelaySeconds: 10
        name: sp-validator
        ports:
        - containerPort: 8443
          name: sp-validator
        - containerPort: 9997
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9997
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: sp-tls
          readOnly: true
      - args:
        - --admin-addr=0.0.0.0:9990
        - --grpc-addr=0.0.0.0:8090
        - --admission-addr=0.0.0.0:9443
        - --cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
        - --identity-domain=cluster.local
        - --default-policy=all-unauthenticated
        - --log-level=linkerd=info,warn
        - --log-format=plain
        image: cr.l5d.io/linkerd/policy-controller:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ready
            port: admin
          initialDelaySeconds: 10
        name: policy
        ports:
        - containerPort: 8090
          name: grpc
        - containerPort: 9990
          name: admin
        - containerPort: 9443
          name: policy-https
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: admin
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: policy-tls
          readOnly: true
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "443"
        image: cr.l5d.io/linkerd/proxy-init:v1.4.0
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-destination
      volumes:
      - name: sp-tls
        secret:
          secretName: linkerd-sp-validator-k8s-tls
      - name: policy-tls
        secret:
          secretName: linkerd-policy-validator-k8s-tls
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Heartbeat
###
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    app.kubernetes.io/name: heartbeat
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.1
    linkerd.io/control-plane-component: heartbeat
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
spec:
  concurrencyPolicy: Replace
  schedule: "57 15 * * *"
  successfulJobsHistoryLimit: 0
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            linkerd.io/control-plane-component: heartbeat
            linkerd.io/workload-ns: linkerd
          annotations:
            linkerd.io/created-by: linkerd/cli stable-2.11.1
        spec:
          nodeSelector:
            beta.kubernetes.io/os: linux
          serviceAccountName: linkerd-heartbeat
          restartPolicy: Never
          containers:
          - name: heartbeat
            image: cr.l5d.io/linkerd/controller:stable-2.11.1
            imagePullPolicy: IfNotPresent
            env:
            - name: LINKERD_DISABLED
              value: "the heartbeat controller does not use the proxy"
            args:
            - "heartbeat"
            - "-controller-namespace=linkerd"
            - "-log-level=info"
            - "-log-format=plain"
            - "-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090"
            securityContext:
              runAsUser: 2103
---
###
### Proxy Injector
###
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
  labels:
    app.kubernetes.io/name: proxy-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.1
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-proxy-injector
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: proxy-injector
  template:
    metadata:
      annotations:
        checksum/config: 19ac4f7698e63542e180c12ed79453ca20f8a29c96811e5447435a9af8694966
        linkerd.io/created-by: linkerd/cli stable-2.11.1
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.11.1
        config.linkerd.io/opaque-ports: "8443"
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: proxy-injector
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-proxy-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_CORES
          value: "1"
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst-headless.linkerd.svc.cluster.local.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: linkerd-policy.linkerd.svc.cluster.local.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8443,9995"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
          limits:
            cpu: "50m"
            memory: "64Mi"
          requests:
            cpu: "20m"
            memory: "32Mi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        lifecycle:
          postStart:
            exec:
              command:
              - /usr/lib/linkerd/linkerd-await
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      - args:
        - proxy-injector
        - -log-level=info
        - -log-format=plain
        image: cr.l5d.io/linkerd/controller:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: proxy-injector
        ports:
        - containerPort: 8443
          name: proxy-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
        - mountPath: /var/run/linkerd/identity/trust-roots
          name: trust-roots
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "4567,4568"
        image: cr.l5d.io/linkerd/proxy-init:v1.4.0
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-proxy-injector
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - configMap:
          name: linkerd-identity-trust-roots
        name: trust-roots
      - name: tls
        secret:
          secretName: linkerd-proxy-injector-k8s-tls
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.1
    config.linkerd.io/opaque-ports: "443"
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: proxy-injector
  ports:
  - name: proxy-injector
    port: 443
    targetPort: proxy-injector
---
apiVersion: v1
data:
  linkerd-config-overrides: ZGVzdGluYXRpb25SZXNvdXJjZXM6CiAgY3B1OgogICAgbGltaXQ6IDUxMm0KICAgIHJlcXVlc3Q6IDEwMG0KICBtZW1vcnk6CiAgICBsaW1pdDogNTEyTWkKICAgIHJlcXVlc3Q6IDEyOE1pCmlkZW50aXR5OgogIGlzc3VlcjoKICAgIHRsczoKICAgICAgY3J0UEVNOiB8CiAgICAgICAgLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCiAgICAgICAgTUlJQmlEQ0NBUzZnQXdJQkFnSUJBVEFLQmdncWhrak9QUVFEQWpBY01Sb3dHQVlEVlFRREV4RnBaR1Z1ZEdsMAogICAgICAgIGVTNXNhVzVyWlhKa0xqQWVGdzB5TWpBeU1qQXhNRFEwTXpKYUZ3MHlNekF5TWpBeE1EUTBOVEphTUJ3eEdqQVkKICAgICAgICBCZ05WQkFNVEVXbGtaVzUwYVhSNUxteHBibXRsY21RdU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNECiAgICAgICAgUWdBRUkzY1NhdHE1cVN2WjJtQllLQmczcENuZThEcHVBa1ZwVGppczdubzJXSGtsN1pySEVKOWI4WTFMUmRCawogICAgICAgIFVFNjNMZE0raUxCb0FrL25PbkJZSHNaaGlLTmhNRjh3RGdZRFZSMFBBUUgvQkFRREFnRUdNQjBHQTFVZEpRUVcKICAgICAgICBNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXCiAgICAgICAgQkJRZnZwMStsU3AzbzJjVVMzOENJWElVRHVrbytEQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpRUF1YVZvTlArVwogICAgICAgIHNSWG1tRG1pTnQ1N2pNYkVCbnRZVzFycVZHUTNHQjZtbjdNQ0lGR0Q4UHhRNzBwaGtHVzJ2eGVQS1E1dWlQRkIKICAgICAgICBPTzliRTJUWkZoY0pHSjg4CiAgICAgICAgLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQogICAgICBrZXlQRU06IHwKICAgICAgICAtLS0tLUJFR0lOIEVDIFBSSVZBVEUgS0VZLS0tLS0KICAgICAgICBNSGNDQVFFRUlHTHg2eUVZbTdOYlVFYzhnQzkrUVAvNkl5RVVwWE1GVG9UcXJ1T0NuNWlTb0FvR0NDcUdTTTQ5CiAgICAgICAgQXdFSG9VUURRZ0FFSTNjU2F0cTVxU3ZaMm1CWUtCZzNwQ25lOERwdUFrVnBUamlzN25vMldIa2w3WnJIRUo5YgogICAgICAgIDhZMUxSZEJrVUU2M0xkTStpTEJvQWsvbk9uQllIc1poaUE9PQogICAgICAgIC0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0KaWRlbnRpdHlSZXNvdXJjZXM6CiAgY3B1OgogICAgbGltaXQ6IDUxMm0KICAgIHJlcXVlc3Q6IDEwMG0KICBtZW1vcnk6CiAgICBsaW1pdDogNTEyTWkKICAgIHJlcXVlc3Q6IDEyOE1pCmlkZW50aXR5VHJ1c3RBbmNob3JzUEVNOiB8CiAgLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCiAgTUlJQmlEQ0NBUzZnQXdJQkFnSUJBVEFLQmdncWhrak9QUVFEQWpBY01Sb3dHQVlEVlFRREV4RnBaR1Z1ZEdsMAogIGVTNXNhVzVyWlhKa0xqQWVGdzB5TWpBeU1qQXhNRFEwTXpKYUZ3MHlNekF5TWpBeE1EUTBOVEphTUJ3eEdqQVkKICBCZ05WQkFNVEVXbGtaVzUwYVhSNUxteHBibXRsY21RdU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNECiAgUWdBRUkzY1NhdHE1cVN2WjJtQllLQmczcENuZThEcHVBa1ZwVGppczdubzJXSGtsN1pySEVKOWI4WTFMUmRCawogIFVFNjNMZE0raUxCb0FrL25PbkJZSHNaaGlLTmhNRjh3RGdZRFZSMFBBUUgvQkFRREFnRUdNQjBHQTFVZEpRUVcKICBNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXCiAgQkJRZnZwMStsU3AzbzJjVVMzOENJWElVRHVrbytEQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpRUF1YVZvTlArVwogIHNSWG1tRG1pTnQ1N2pNYkVCbnRZVzFycVZHUTNHQjZtbjdNQ0lGR0Q4UHhRNzBwaGtHVzJ2eGVQS1E1dWlQRkIKICBPTzliRTJUWkZoY0pHSjg4CiAgLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQpwcm94eToKICBjb3JlczogMQogIHJlc291cmNlczoKICAgIGNwdToKICAgICAgbGltaXQ6IDUwbQogICAgICByZXF1ZXN0OiAyMG0KICAgIG1lbW9yeToKICAgICAgbGltaXQ6IDY0TWkKICAgICAgcmVxdWVzdDogMzJNaQpwdWJsaWNBUElSZXNvdXJjZXM6CiAgY3B1OgogICAgbGltaXQ6IDUxMG0KICAgIHJlcXVlc3Q6IDEwMG0KICBtZW1vcnk6CiAgICBsaW1pdDogNTEwTWkKICAgIHJlcXVlc3Q6IDEyOE1pCg==
kind: Secret
metadata:
  labels:
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-config-overrides
  namespace: linkerd
