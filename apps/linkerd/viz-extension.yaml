---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRV2o1RGx5TFU2bGVWQWNVV0c2QTZMekFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURNeU56QTVNamN6T0ZvWApEVEl6TURNeU56QTVNamN6T0Zvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTUZnZGRGejFIdmRWRmhYQU9PdklIYm8Kb2thTGhLQzh0d2p4WGpJQlZuZWZHY1Y2UUxocDVKcXlabitMVjcrY2ZDN2RwTVZFVkFNZnVVNi9uK1NhdkdrUQphSi94eSswME9rUU92cVlkSE9aQUV2ZVdWUzdJQXh0YmQ1RVdYNlQvNFB6RzZxY0w1VTFIcVJJWFlESTVJNWJVClVyanJxOCt1Tjd5cGdSZlRFcUYzYzh2UlJoOWloNWNXNkpaTE9MZkpaUUlKeGJFelpjdS9Fdzk4anR2Z2RPWDMKbFdwK0YrSjZpK0pjR01FRWpLV1FIeXZYQU0zbnNQTVRhS1c3b2x2czZHK0pzdnF4cnVJUzFWMG9HUm9BVzRqbgp1WlpJR1NEZEVYbjVoRWtJb0phaFdwdHBjam5NTGMxZWZoUVpFT1l3d1RTZk5acjdhNlFha2M4dnNJVWpsSk1DCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFENlN0VlM1RVpSYzBUcWpBd2dTdTZLUWVRaHFwSHFZCmRNL1JIOXdFZS9UNk95YzJWK0lMRVhaenh2Rm4vc2JncE5jcFV3M251U0p4dEFCc3lmM1pxSm55b1BBbUVRNWIKdGtwNTFCYnBCb1RpQWZsN1ByWitZSXJoSUltbEN6SXNpSWtoZXg0WTZVTHRjRmVrcmpMdkZTeDJCTDhCbXZibgo2OVBwc3N5dzJmYnYyN0RBRFcyUi9ROEswalVqRDBDLzhMRnJvalgwNWJ6WU1VQXVCREF1ZXlWRHRJeUlxQ2RBCitMSC91UlNSWVkzVUhLNy95eVAvQXB2YmdMaVR2cFA1Y3Z4OW02aWJHTUdwK2RtU1RyWXVaYkYzS1JOS21nMVUKN0xNRU5BMjVMOHRjVk94d08vMmRTS3hYV1B0L25CNWkxMlhSd21lVk1MWGlKb2k5MU9TUkR1OD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd1dCMTBYUFVlOTFVV0ZjQTQ2OGdkdWlpUm91RW9MeTNDUEZlTWdGV2Q1OFp4WHBBCnVHbmttckptZjR0WHY1eDhMdDJreFVSVUF4KzVUcitmNUpxOGFSQm9uL0hMN1RRNlJBNitwaDBjNWtBUzk1WlYKTHNnREcxdDNrUlpmcFAvZy9NYnFwd3ZsVFVlcEVoZGdNamtqbHRSU3VPdXJ6NjQzdkttQkY5TVNvWGR6eTlGRwpIMktIbHhib2xrczR0OGxsQWduRnNUTmx5NzhURDN5TzIrQjA1ZmVWYW40WDRucUw0bHdZd1FTTXBaQWZLOWNBCnplZXc4eE5vcGJ1aVcrem9iNG15K3JHdTRoTFZYU2daR2dCYmlPZTVsa2daSU4wUmVmbUVTUWlnbHFGYW0ybHkKT2N3dHpWNStGQmtRNWpEQk5KODFtdnRycEJxUnp5K3doU09Va3dJREFRQUJBb0lCQUFKSzYzcXRQZUt1RUJidwpDU0dwN04rY0NIaC9wUFhtNXVDalEvT2gwbTJlcEVhVUdYcFdQeENhZHQ2aVAwc1ZSdCtqWHhXN3BxZFcwL0tjCkVRQTcyV29CZU13VXFNOUtKRHEwVmd4UUlneVV5K1RGa29MNGVoano3Nm4zc3ZDWTNBa0RMcnNHU0JTdmVkQ3UKR0VUZ0tvemFQWlRWcm5iSzRQeEtvaTR2SVhScW1kQm9FK09hdE5mWmhGTUJnZkt5VnJWNkhyMENMT1ErUzJCUgpHa2c2QmNKZktWbW1Wc0FuWVlQTm5aVGFUbkVLSkJOY1NvTjVsRkdZUWpuUDhvOUpmRldrWjdyUWdubFFlWFVhClhkTVNQSFlCbk1OZlBIeVlVZ3l5QjZwQzBEbS9GekozME1SVEgvY3Z1VXIxMjVxMnp5MUZIRmFPTnVYUTZsKysKRXhSditOa0NnWUVBLzFwVERHWUgxeWowblJDR2RkaUt1eitzS2lJNmdCdWh0YjM0aW9aK09Oc0NOdnp6eVZnYwoxdnpCS0o0M1diOHd3Z1E1dHpxYytlaXduM3FEZG9JR2Q2c0NFNHFmVkMreVU5Qm1uVlkwZUtqUXVuNThCbDR3CnVGc1JnMDhybWhodmxnT2R1c3lmYUZ0akQwcUQwR1lXZ2VRYXZWcWZaUEt4b3cvR0E2VjRTbGNDZ1lFQXdkM3MKMUs1SkZHZ1Z0NzhtOVlzaWhqeW4vMWlqUkhBaXd1eUtGRjZDTXJBTTJsOGxXenBDekk3cE9jaVFKa1FVaVNPSwpPREMvdnVQNkVwNGw3WUR0ZSsxNFdETUtXaGlIeWRmdStYcWlNb2NicjEybFBmb1dqaWtYL08wdmtBY21sWit5CjdiNUN3QkkxUXhKWXhiK043WlJMUlVzTXphOHFSUzZnYlIzc0dpVUNnWUVBaE41RitseVkxYzc4d1VGWkJiYmcKTVNDbmYrRUJtYWxIRXA4LzFTeTRQdk5PaXJoQ1RkRW9hSUZxTEsxdTFhY1RRdEVhQ3dwWHBmMzY4WEM1T1EvZApONlZtMWk0NlMzN3FCb3lZNkdOenVCajNTeU1IZS9URTJ4aWYyemgxMHAvR2FFT0hiaXlOQWFzVHQyQXBpR1dtCmJuMzNuL0dvb01sYnZ5STFBYTYzRWM4Q2dZQVhEd0ZqVHBPTXBOQ29lVWoxL2FXT2w5cFhpY0JwbkhqVi9ISnoKOThXK3A2ZnZ0VTlwS1dYV2xNenl2WU0vdWV0RFlJSEpLeXN6VmtSaFFJUThXcEJrcEJzalNuYlp2bjh3SjhuWgp6SmRNTVR1K3dRR3RmSGlBVWl6elBYYmh4NmYwTmZsL1E1a0c1V09HWmNFL1RBaGlrTGZmTnd6L3pleldLN1NUCkpmTDJMUUtCZ0RvNEo2U25DeTV6VXZzckgyNWVZYzlqUSszcUx6MjdVSDlORXMwNy9NMzV5ZGhFejVKNnEyWW8KaWh5Z1hwY08yN2IzUUJUakEvOFJKZG9mY1IxSWdQMlIxWExrWkVlZDVGMzZscmpKTTAxQy9SY1Boang4RE9hbQp1QWxqakRaTHY2SDA0STI3akwzcFVGYlJNa3hEdE1HeGkzMGtFU2JsdGFWSHgzL2RWSTAxCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRV2o1RGx5TFU2bGVWQWNVV0c2QTZMekFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURNeU56QTVNamN6T0ZvWApEVEl6TURNeU56QTVNamN6T0Zvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTUZnZGRGejFIdmRWRmhYQU9PdklIYm8Kb2thTGhLQzh0d2p4WGpJQlZuZWZHY1Y2UUxocDVKcXlabitMVjcrY2ZDN2RwTVZFVkFNZnVVNi9uK1NhdkdrUQphSi94eSswME9rUU92cVlkSE9aQUV2ZVdWUzdJQXh0YmQ1RVdYNlQvNFB6RzZxY0w1VTFIcVJJWFlESTVJNWJVClVyanJxOCt1Tjd5cGdSZlRFcUYzYzh2UlJoOWloNWNXNkpaTE9MZkpaUUlKeGJFelpjdS9Fdzk4anR2Z2RPWDMKbFdwK0YrSjZpK0pjR01FRWpLV1FIeXZYQU0zbnNQTVRhS1c3b2x2czZHK0pzdnF4cnVJUzFWMG9HUm9BVzRqbgp1WlpJR1NEZEVYbjVoRWtJb0phaFdwdHBjam5NTGMxZWZoUVpFT1l3d1RTZk5acjdhNlFha2M4dnNJVWpsSk1DCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFENlN0VlM1RVpSYzBUcWpBd2dTdTZLUWVRaHFwSHFZCmRNL1JIOXdFZS9UNk95YzJWK0lMRVhaenh2Rm4vc2JncE5jcFV3M251U0p4dEFCc3lmM1pxSm55b1BBbUVRNWIKdGtwNTFCYnBCb1RpQWZsN1ByWitZSXJoSUltbEN6SXNpSWtoZXg0WTZVTHRjRmVrcmpMdkZTeDJCTDhCbXZibgo2OVBwc3N5dzJmYnYyN0RBRFcyUi9ROEswalVqRDBDLzhMRnJvalgwNWJ6WU1VQXVCREF1ZXlWRHRJeUlxQ2RBCitMSC91UlNSWVkzVUhLNy95eVAvQXB2YmdMaVR2cFA1Y3Z4OW02aWJHTUdwK2RtU1RyWXVaYkYzS1JOS21nMVUKN0xNRU5BMjVMOHRjVk94d08vMmRTS3hYV1B0L25CNWkxMlhSd21lVk1MWGlKb2k5MU9TUkR1OD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  server:
    name: admin
  client:
    # for kubelet probes and prometheus scraping
    unauthenticated: true

---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  server:
    name: proxy-admin
  client:
    # for kubelet probes
    unauthenticated: true

---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.1
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 951a7b61ff59229914ca604c671353e5fdc0eda710bde2bfbb50c9225225babe
        linkerd.io/created-by: linkerd/helm stable-2.11.1
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        image: cr.l5d.io/linkerd/metrics-api:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  server:
    name: metrics-api
  client:
    meshTLS:
      serviceAccounts:
      - name: web
      - name: prometheus
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
    [log]
    mode = console
    [log.console]
    format = text
    level = info
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.1
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.1
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: cr.l5d.io/linkerd/grafana:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: grafana-config
        name: grafana-config
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: grafana
  labels:
    linkerd.io/extension: viz
    component: grafana
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: grafana
  labels:
    linkerd.io/extension: viz
    component: grafana
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  server:
    name: grafana
  client:
    # web, prometheus and the kubelet probes
    unauthenticated: true
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.1
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.1
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.19.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.1
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: edd420c8d35255dafffc81bd7997e7909783e1411aa68d5883c298da3c65b035
        linkerd.io/created-by: linkerd/helm stable-2.11.1
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        image: cr.l5d.io/linkerd/tap:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  server:
    name: tap-api
  client:
    # traffic coming from kube-api
    unauthenticated: true
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRY014Z2hQODJXcHNYNEh1VTQzNFpOekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURNeQpOekE1TWpjek9Gb1hEVEl6TURNeU56QTVNamN6T0Zvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUxBeWFhMENRb2tHYjBEOHRPNEJ1aEh1ck5OQ2dRTGxPYk8rQlVkQVFJRjd2bW9VTytXeFpIZkhrckp2YjlJUApLY2kvQitwYmtCWXRIcnFlVTFNdnRGS2d5c2I2aWdDSzlQSjI2b0JZUHVZcFJnVTBzU29KNG5QSk5BWndLdG16ClhpbEl4cldCMVBHUHFURGhaY3ZwbHdKNmdpaHVkeTk4QjUvUm1wTDJmUEROQ0dlWUhRYnQ2Rkh3TVpHcXJadFUKSVhvMS9yY0xVNHdsb0t3Z0RKOUltZnN4Rktld043UnkrbzdNbnV1MDdIN25hUlVWK3dKeUQ2dFh0WDBtaWtQMApzYjMzdFh0cG9XTVk3RUNLZEFzMDJOcWpCUnFyR0pRKy8vVUpNd0R5eFErNElEaCs1ZGlCK0dNaG9qNlZtSEt2CnRWRTNyZElmY1FyaWo5M3BhMGdPUjdrQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBR1hXbUxYZTZhNStUV0tlenhxOVAvV1ZkMkxsdXF2QnR5N2lZd3BSV2NITUR5K1RPakRjRXFBenR0NVMKdlZ5Uk51MTJLbnd5cnVOMFFDdWIzczllUXhLZjFUbkVOK3dxbEF1WXNwS21kbGNMRGI5R0hYdUxlcGNROXlkRwphMlNLcUlqcExSaEVJOHhhMUU2MVZKM2sydzk5enV5RHpRZkdKajk2ZE9pZkRuV3FlbU9PR2J1WEcrV21mdkt2ClR3WWxYdWtMQzFGd0I1RUs3dUxDaTh6VzErUk0rVi95eTEvTHNzUDl6ZFc0WUwrWnJXeXYrdEZQNG13RHhRMFQKbS9KMnB3ejljZHIxV3hjOEhid2oyWkE2OHJRUEtwaHdPblB0RHVxSFlRaU94Sm44MDNNbnEvZTB2V1lDQjhRRQpJRldRMk5Ma0E4NG1EWE4vMXFia2hzbUNtZjg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc0RKcHJRSkNpUVp2UVB5MDdnRzZFZTZzMDBLQkF1VTVzNzRGUjBCQWdYdSthaFE3CjViRmtkOGVTc205djBnOHB5TDhINmx1UUZpMGV1cDVUVXkrMFVxREt4dnFLQUlyMDhuYnFnRmcrNWlsR0JUU3gKS2duaWM4azBCbkFxMmJOZUtVakd0WUhVOFkrcE1PRmx5K21YQW5xQ0tHNTNMM3dIbjlHYWt2Wjg4TTBJWjVnZApCdTNvVWZBeGthcXRtMVFoZWpYK3R3dFRqQ1dnckNBTW4waVorekVVcDdBM3RITDZqc3llNjdUc2Z1ZHBGUlg3CkFuSVBxMWUxZlNhS1EvU3h2ZmUxZTJtaFl4anNRSXAwQ3pUWTJxTUZHcXNZbEQ3LzlRa3pBUExGRDdnZ09IN2wKMklINFl5R2lQcFdZY3ErMVVUZXQwaDl4Q3VLUDNlbHJTQTVIdVFJREFRQUJBb0lCQUdldFVsZFdKQmFDN2NYOApyTzM3b0NSYkgrQ3ptanc4NjRZalF2SFpFZHZmRjMxTjZLelFoQUNqTTJQQmhMZkM2bUJRWC9UNzZiM1MwT2tZCnJva2RZZXJZNkZqTEpaY0tMUFhiR1VOcUthQy9HbytIb05QT3V5eE1jVXQwaHhKUXBCQ0EzVVFDWUcyL2pkdlEKVlZqMlcwQS9IQVYwY3JkRE1TMU9aYmtpUndSZGRsbXZ4dElrb2RiV243UXB6WGJlTkJqZ3hkM0xPSFJXREVDUApySGozTHZmTDdCQ0hwNlZzVHc1aWx6RlNscGs3NWdNYzl4NWllQWpuRnNRQWdnV1RGdUh3aW9WcXNibjFJb0FxCk9zeUF5bjY0Um9SNDVVTTJNVGNjbkFkL0NNNGh1Ri9LSTU2SDEwZDg2V043ci9qN1RZMjB2YVFKemV3V0hrUWIKTVhpT08rMENnWUVBdytrSjBudVF3L2VSL09VbFhDSGZheW1wZUZwT3JWWjd0SHZxOVdQWUcrcjhnZzYrejNOZgpDcXp6WGlEejJIMGxwM01DUmppUU1NN21nUVNudHBXR1A4emVaWmtKRTFhTGp1ZmxvK0s5ZUZrcTlrQkcwWnN6CmxQYWZwWXVTUzNEalZtUVpGelhDaUNlVk96a2ExMHJlMzlQMXIwUU1adlB3aTg0QnFFbjR6U01DZ1lFQTVqMTQKbzhRbGZkNnduTUthaVk3K1RUdkZkVTNoSUVmMHd0SGhzUExpRHJkUkZmdSsxemoveDRkbEcrSHhvNk5ycjg4Rwp2Vno3REN4R25WaE1CQWRvQmN0RGFRZjU0OFI2cEJ4TlByeTAyeVJLN1pIRGo2dVNCOFhmbkVuR1hFOTI3ODRaCjJvQTdNM1IvcnhSZWY0SjlNU3hpd25jQXJ5dHN3bGlqNHM1SjYzTUNnWUJENzEydWxaYS92ZXZyN0hJbUhzRGcKNGxPWUhvakY1d1dDc3EzcFpqUWNpa0lCdjZjL1BOeXFVUXNiaXdYRC9yRzkvVTIrbUFLNFNpYjRlbXJHRDllNwo3QWo2NWpTVmRoOXk4TXRiSjFkWWttTXBmV1NSYnVaV002ZHN1cGVDZmFUMzRrSXBJRVZTL1pic01JTTBRUXhFClJiWWVqdFJXSnlVMDlienhaS1ZZVFFLQmdBMmUwMVUwMUZiMjVwSFBmVjduNDZsa0FORm9zd202MkFMeWNaeUwKTWM1WEQrZnlCWjhyMHczVnQ2aUhuRWptOFFic2cyU09iSmVTd3ZhcDg0MUZkdVRvMm1zTE9zQTdybG1wQnZUUQpLdzdQdmRNQ0RZU2hUTGxDL25CN2VNMmJNZGtMNDBHbTFsbTc2WlhNNmE0M1pQcVV1cDd3ZFV6bmo3NkxpZDV2Ci83VjdBb0dCQUtSejlDeG5Cem1oTjFGWE44N0QrbEtTWkxTYTdOYkxCaEx0UmtTTFk2Z25ZR1paeVRxbmVZSDIKVi9FcGtQWGsxa0VieDNXaCtoc1B6cGVXeEZWa0toSWZZNkk0NUlKMGU5aUJHMWdXM2VvdGtDNmZyNDdpUEwyZQp1dlNOdDZBWGZ2cTQ3MUdOSmZ3ME1xa0VNbGRNK3hTT1A2Q3piZ0dhZ3JtbkxsUEEzN241Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRY014Z2hQODJXcHNYNEh1VTQzNFpOekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURNeQpOekE1TWpjek9Gb1hEVEl6TURNeU56QTVNamN6T0Zvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUxBeWFhMENRb2tHYjBEOHRPNEJ1aEh1ck5OQ2dRTGxPYk8rQlVkQVFJRjd2bW9VTytXeFpIZkhrckp2YjlJUApLY2kvQitwYmtCWXRIcnFlVTFNdnRGS2d5c2I2aWdDSzlQSjI2b0JZUHVZcFJnVTBzU29KNG5QSk5BWndLdG16ClhpbEl4cldCMVBHUHFURGhaY3ZwbHdKNmdpaHVkeTk4QjUvUm1wTDJmUEROQ0dlWUhRYnQ2Rkh3TVpHcXJadFUKSVhvMS9yY0xVNHdsb0t3Z0RKOUltZnN4Rktld043UnkrbzdNbnV1MDdIN25hUlVWK3dKeUQ2dFh0WDBtaWtQMApzYjMzdFh0cG9XTVk3RUNLZEFzMDJOcWpCUnFyR0pRKy8vVUpNd0R5eFErNElEaCs1ZGlCK0dNaG9qNlZtSEt2CnRWRTNyZElmY1FyaWo5M3BhMGdPUjdrQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBR1hXbUxYZTZhNStUV0tlenhxOVAvV1ZkMkxsdXF2QnR5N2lZd3BSV2NITUR5K1RPakRjRXFBenR0NVMKdlZ5Uk51MTJLbnd5cnVOMFFDdWIzczllUXhLZjFUbkVOK3dxbEF1WXNwS21kbGNMRGI5R0hYdUxlcGNROXlkRwphMlNLcUlqcExSaEVJOHhhMUU2MVZKM2sydzk5enV5RHpRZkdKajk2ZE9pZkRuV3FlbU9PR2J1WEcrV21mdkt2ClR3WWxYdWtMQzFGd0I1RUs3dUxDaTh6VzErUk0rVi95eTEvTHNzUDl6ZFc0WUwrWnJXeXYrdEZQNG13RHhRMFQKbS9KMnB3ejljZHIxV3hjOEhid2oyWkE2OHJRUEtwaHdPblB0RHVxSFlRaU94Sm44MDNNbnEvZTB2V1lDQjhRRQpJRldRMk5Ma0E4NG1EWE4vMXFia2hzbUNtZjg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 8f831b93db64e3f143d048f7e2fa4bd1104134c07d7d7922197a8d8ad01efbf0
        linkerd.io/created-by: linkerd/helm stable-2.11.1
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        image: cr.l5d.io/linkerd/tap:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  server:
    name: tap-injector-webhook
  client:
    # traffic coming from kube-api
    unauthenticated: true
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.1
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.1
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        image: cr.l5d.io/linkerd/web:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: grafana.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
  - name: GET /api/annotations
    condition:
      method: GET
      pathRegex: /api/annotations
  - name: GET /api/dashboards/tags
    condition:
      method: GET
      pathRegex: /api/dashboards/tags
  - name: GET /api/dashboards/uid/{uid}
    condition:
      method: GET
      pathRegex: /api/dashboards/uid/.*
  - name: GET /api/dashboard/{dashboard}
    condition:
      method: GET
      pathRegex: /api/dashboard/.*
  - name: GET /api/datasources/proxy/1/api/v1/series
    condition:
      method: GET
      pathRegex: /api/datasources/proxy/1/api/v1/series
  - name: GET /api/datasources/proxy/1/api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/datasources/proxy/1/api/v1/query_range
  - name: GET /api/search
    condition:
      method: GET
      pathRegex: /api/search
  - name: GET /d/{uid}/{dashboard-name}
    condition:
      method: GET
      pathRegex: /d/[^/]*/.*
  - name: GET /public/build/{style}.css
    condition:
      method: GET
      pathRegex: /public/build/.*\.css
  - name: GET /public/fonts/{font}
    condition:
      method: GET
      pathRegex: /public/fonts/.*
  - name: GET /public/img/{img}
    condition:
      method: GET
      pathRegex: /public/img/.*
